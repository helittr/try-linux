import{_ as d,M as r,p as h,q as u,R as e,t as a,N as n,V as t,a1 as l}from"./framework-48b97196.js";const p={},b=l('<h1 id="安装并启动镜像" tabindex="-1"><a class="header-anchor" href="#安装并启动镜像" aria-hidden="true">#</a> 安装并启动镜像</h1><p>你是否有过因为学习 linux 而选择各种开发板而烦恼？搭建构建环境和下载源码各种报错而放弃？频繁刷写镜像而厌烦？ 此项目被用于解决这些烦恼，让你初学者快速的学习和调试 linux 内核源码。并且详细的记录镜像的搭建流程，使用方式以及 记录 linux 开发流程。你可以按照步骤构建一个属于自己的镜像。经过这个流程相信你会收获颇丰。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>本文会提及大量的知识来源，笔者认为 <strong>通常来说, 没有比官方文档更好的文档！！！</strong>。大量的知识都来至于官方文档，并阅读 的过程中总结而来，当你遇到问题而通过本文或者搜索引擎无法解决时，它就是最好的资料。</p></div><h2 id="仓库地址" tabindex="-1"><a class="header-anchor" href="#仓库地址" aria-hidden="true">#</a> 仓库地址</h2>',4),_={href:"https://github.com/helittr/try-linux",target:"_blank",rel:"noopener noreferrer"},m={href:"https://gitee.com/helittr/try-linux",target:"_blank",rel:"noopener noreferrer"},g={href:"https://hub.docker.com/repository/docker/helittr/try-linux/general",target:"_blank",rel:"noopener noreferrer"},k=e("h2",{id:"镜像描述",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#镜像描述","aria-hidden":"true"},"#"),a(" 镜像描述")],-1),v=e("li",null,"该镜像基于 ubuntu:focal 构建而来，在此基础上安装了必要的工具。",-1),f={href:"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu-ports/",target:"_blank",rel:"noopener noreferrer"},x=e("li",null,"包含Linux 源码，以及 qemu 方便快速调试",-1),E={id:"openssh",tabindex:"-1"},y=e("a",{class:"header-anchor",href:"#openssh","aria-hidden":"true"},"#",-1),w={href:"https://man.openbsd.org/sshd.8",target:"_blank",rel:"noopener noreferrer"},A=l('<p>容器启动时会启动 sshd 服务。用于在宿主机上通过 vscode 等支持远程开发的工具链接到该容器，进行构建和调试。</p><h3 id="linux-构建依赖" tabindex="-1"><a class="header-anchor" href="#linux-构建依赖" aria-hidden="true">#</a> linux 构建依赖</h3><p>包含 make，git 等构建内核必备的工具。 详细的工具可以查看docker构建脚本 dockerfile 中的工具安装命令。</p><h3 id="编译器" tabindex="-1"><a class="header-anchor" href="#编译器" aria-hidden="true">#</a> 编译器</h3><p>默认安装 gcc-arm-linux-gnueabihf 交叉编译工具。</p><h3 id="linux-源码" tabindex="-1"><a class="header-anchor" href="#linux-源码" aria-hidden="true">#</a> linux 源码</h3><p>使用浅克隆方式下载源码避免镜像体积太大,默认下载树莓派源码到 <strong>/root/linux/</strong> 目录下。</p><h2 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h2>',8),B={href:"http://docker.p2hp.com/",target:"_blank",rel:"noopener noreferrer"},C=e("p",null,"在此之前你可能使用过想 Vmware, VirtualBox, qemu 等，虚拟机程序。他们可以运行一个独立的操作系统,如: windows, debian, ubuntu …… 。 他们的都是通过代码虚拟化 CPU, 硬盘等硬件设备, 通过软件的方式模拟一个机器码执行环境，来运行操作系统。通常这些虚拟机产品的性能都比较差, 因为大部分计算都用于模拟 CPU 等硬件设备，并且操作系统镜像通常很大难以分发。",-1),S=e("p",null,"而 docker 与这个虚拟机产品相比，它不需要模拟硬件设备，而是使用宿主机的系统，着重在隔离进程, 文件, 等资源。 而不是隔离整个操作系统， 所以有着与在宿主机几乎一样的性能。被广泛运用在分布式，云应用，自动话部署等领域。",-1),T=e("p",null,"它也可以用与开发中，打包一个源码和构建环境的镜像，省去了环境搭建的时间并且使所有的开发者都使用相同的环境，可以避免因环境而导致的各种问题。",-1),O=e("h3",{id:"安装-docker",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-docker","aria-hidden":"true"},"#"),a(" 安装 docker")],-1),L=e("p",null,"TODO: 待补充",-1),V={class:"custom-container tip"},D=e("p",{class:"custom-container-title"},"TIP",-1),G={href:"https://docs.docker.com/",target:"_blank",rel:"noopener noreferrer"},N={id:"安装-git",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#安装-git","aria-hidden":"true"},"#",-1),W=l(`<p>TODO: 待补充</p><h2 id="使用镜像" tabindex="-1"><a class="header-anchor" href="#使用镜像" aria-hidden="true">#</a> 使用镜像</h2><h3 id="运行容器" tabindex="-1"><a class="header-anchor" href="#运行容器" aria-hidden="true">#</a> 运行容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">22</span>:22  <span class="token parameter variable">-e</span> <span class="token assign-left variable">ROOTPASSWD</span><span class="token operator">=</span>root <span class="token parameter variable">--name</span> try try-linux 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>-d 选项表示容器启动后在后台运行，如果不指定该选项，关闭命令行或者使用<kbd>Ctrl</kbd>+<kbd>C</kbd>终止进程，容器也会同时停止运行。</li><li>-p 将容器中的端口映射到主机中，&#39;:&#39; 前面是指 host 端口, 后面数字是指容器中的端口。映射后主机的端口的数据将会被转发到容器中的端口。22 是 sshd 服务默认的端口号。请勿修改容器中的端口，如果你主机的端口 22 已经被占用你可以使用其他端口，比如:-p 222:22。</li><li>-e 指定容器的环境变量，容器启动时会读取 环境变量 ROOTPASSWD 的值来设定 root 的用户密码。</li><li>--name 指定容器的名字。</li><li>try-linux 用于启动容器的镜像的名字。 你可以通过设置环境变量 ROOTPASSWD， 来设置容器中 root 用户的密码，默认为 root.</li></ul><h3 id="启动现有容器" tabindex="-1"><a class="header-anchor" href="#启动现有容器" aria-hidden="true">#</a> 启动现有容器</h3><p>容器启动后，所有数据将保存在容器中，如果你需要继续使用请不要删除该容器。当你的电脑重启后，你的容器并不会自动启动，也不需要创建一个新的容器。你可以通过下面命令来重新运行已经创建的容器。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start try 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>try 是你在 <a href="#%E8%BF%90%E8%A1%8C%E5%AE%B9%E5%99%A8">运行容器</a>时通过 <code>--name</code> 指定的容器名字。</li></ul>`,9),I={id:"测试连接",tabindex:"-1"},$=e("a",{class:"header-anchor",href:"#测试连接","aria-hidden":"true"},"#",-1),q=e("p",null,"如果你使用的是 bash shell 执行下面命令来连接到容器：",-1),F=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"ssh"),a(" root@"),e("span",{class:"token variable"},[e("span",{class:"token variable"},"`"),e("span",{class:"token function"},"hostname"),e("span",{class:"token variable"},"`")]),a(`.local
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),R=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[a("ssh root@$"),e("span",{class:"token punctuation"},"("),a("hostname"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),a(`local
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),U=l(`<p>根据提示输入 root 用户密码 <code>root</code>, 你输入密码时终端将不会显示，输入后按 <kbd>Enter</kbd>确认，连接成功后你将进入容器中的命令行。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>Welcome to Ubuntu 20.04.5 LTS (GNU/Linux 5.15.90.1-microsoft-standard-WSL2 x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

This system has been minimized by removing packages and content that are
not required on a system that users do not log into.

To restore this content, you can run the &#39;unminimize&#39; command.
Last login: Sun Mar 12 06:04:58 2023 from 172.17.0.1
root@0eb7a32e07d2:~#
</code></pre></div><p>你可以通过 <code>exit</code> 命令退出远程终端，回到当前的终端。</p><div class="custom-container danger"><p class="custom-container-title">特别注意</p><p>如果你在<a href="#%E5%90%AF%E5%8A%A8%E5%AE%B9%E5%99%A8">启动容器</a>时 使用 -p 修改了默认的 22 端口号，在连接时也必须通过 ssh 命令的 -p 选项来指定连接端口。 如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-p</span> <span class="token number">222</span> root@<span class="token variable"><span class="token variable">\`</span><span class="token function">hostname</span><span class="token variable">\`</span></span>.local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ssh <span class="token operator">-</span>p 222 root@$<span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">.</span>local
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div><h3 id="设置免密登录" tabindex="-1"><a class="header-anchor" href="#设置免密登录" aria-hidden="true">#</a> 设置免密登录</h3><ol><li>如果你的系统中没有可用的密钥对,你可以使用 ssh-keygen 生成 ssh 密钥对。</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所有输入信息留空，直到设置完成。生成的密钥对将保存在 <code>~/.ssh/</code> 文件夹中。</p><ol start="2"><li>将公钥上传至容器</li></ol>`,9),z={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"git bash",-1),j=e("a",{href:"#%E5%AE%89%E8%A3%85-git"},"安装 git",-1),H=e("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[a("ssh-copy-id root@"),e("span",{class:"token variable"},[e("span",{class:"token variable"},"$("),e("span",{class:"token function"},"hostname"),e("span",{class:"token variable"},")")]),a(`.local
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),J=e("div",{class:"language-powershell line-numbers-mode","data-ext":"powershell"},[e("pre",{class:"language-powershell"},[e("code",null,[a("ssh  root@$"),e("span",{class:"token punctuation"},"("),a("hostname"),e("span",{class:"token punctuation"},")"),e("span",{class:"token punctuation"},"."),a("local "),e("span",{class:"token string"},[a('"mkdir ~/.ssh/; echo '),e("span",{class:"token function"},[a("$"),e("span",{class:"token punctuation"},"("),e("span",{class:"token function"},"cat"),a(" ~"),e("span",{class:"token operator"},"/"),e("span",{class:"token punctuation"},"."),a("ssh/id_rsa"),e("span",{class:"token punctuation"},"."),a("pub"),e("span",{class:"token punctuation"},")")]),a(' >> ~/.ssh/authorized_keys"')]),a(`
`)])]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),K=e("p",null,[a("配置成功后你可以无需输入密码，便可以登录到主机。如何登录可以参考 "),e("a",{href:"#%E6%B5%8B%E8%AF%95%E8%BF%9E%E6%8E%A5"},[e("strong",null,"测试连接")]),a("。")],-1);function Q(X,Y){const s=r("ExternalLinkIcon"),i=r("Badge"),o=r("CodeGroupItem"),c=r("CodeGroup");return h(),u("div",null,[b,e("ul",null,[e("li",null,[a("github： "),e("a",_,[a("https://github.com/helittr/try-linux"),n(s)])]),e("li",null,[a("gitee ： "),e("a",m,[a("https://gitee.com/helittr/try-linux"),n(s)])]),e("li",null,[a("docker-hub: "),e("a",g,[a("https://hub.docker.com/repository/docker/helittr/try-linux/general"),n(s)])])]),k,e("ul",null,[v,e("li",null,[a("修改 ubuntu 镜像源为 清华源 ("),e("a",f,[a("https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu-ports/"),n(s)]),a(") 加速包的下载")]),x]),e("h3",E,[y,a(),e("a",w,[a("openssh"),n(s)])]),A,e("p",null,[a("在使用镜像之前你需要安装一些必备的程序，"),e("a",B,[a("docker"),n(s)]),a(" 是一个工具，可以使程序运行的与主机隔离的环境中。")]),C,S,T,O,L,e("div",V,[D,e("p",null,[a("你可以参考 "),e("a",G,[a("docker doc"),n(s)]),a(" 来获取详细的了解它。")])]),e("h3",N,[P,a(" 安装 git "),n(i,{text:"可选"})]),W,e("h3",I,[$,a(" 测试连接 "),n(i,{text:"Test"})]),q,n(c,null,{default:t(()=>[n(o,{title:"bash"},{default:t(()=>[F]),_:1}),n(o,{title:"powershell"},{default:t(()=>[R]),_:1})]),_:1}),U,e("p",null,[a("对于 bash 用户, 你可以使用 ssh-copy-id 命令上传公钥至主机。如果你是 Windows 用户你可以安装 "),e("a",z,[a("Git"),n(s)]),a(" 客户端，来获得一个 "),M,a(" 终端。请参考 "),j,a("。")]),n(c,null,{default:t(()=>[n(o,{title:"bash"},{default:t(()=>[H]),_:1}),n(o,{title:"powershell"},{default:t(()=>[J]),_:1})]),_:1}),K])}const ee=d(p,[["render",Q],["__file","index.html.vue"]]);export{ee as default};
